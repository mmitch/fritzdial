#!/usr/bin/perl -Ifritz
print <<LICENCE;
#
# fritzdial - simple commandline dial help for Fritz!Box
# Copyright (C) 2015 by  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v2 or later.
#
LICENCE
    ;
use warnings;
use strict;

use Term::ReadLine;

use Fritz::Box;

########################################################
###
### global variables

my %cmd;
my %shortlist;
my $fritz_service;
my ($user, $pass, $url);
my $OUT = \*STDOUT;

use constant VOIP_SERVICE  => 'X_VoIP:1';
use constant DIAL_ACTION   => 'X_AVM-DE_DialNumber';
use constant DIAL_ARG      => 'NewX_AVM-DE_PhoneNumber';
use constant HANGUP_ACTION => 'X_AVM-DE_DialHangup';

########################################################
###
### subroutines

sub expander($@) {
    my ($value, @valid) = (@_);
    return () unless defined $value;
    return grep { index($_, $value) == 0} @valid;
}

sub check_ok($) {
    my $check = shift;
    if ($check->error) {
	printf $OUT "ERROR: %s\n", $check->error;
	return 0;
    }
    else {
	print $OUT "OK\n";
	return 1;
    }
}

########################################################
###
### commands

%cmd = (
    dial => {
	description => 'dial a number and start a call',
	code => sub {
	    my $number = join('', @_);
	    if (length $number == 0) {
		print $OUT "no number given\n";
		return;
	    }

	    my @expand = expander($_[0], keys %shortlist);
	    if (@expand > 1) {
		printf $OUT "ambigious dial shortcut, possible completions are: %s\n", join(' ', @expand);
		return;
	    }

	    my $show = $number;
	    if (@expand == 1) {
		$number = $shortlist{$expand[0]};
		$show .= " [$number]";
	    }

	    # remove whitespace and common punctuation in telephone numbers
	    $number =~ s/\s+//g;
	    $number =~ tr,-()[]/+#,,d;
	    if ($number !~ /^\d+$/) {
		printf $OUT "dial error: `%s' is not numeric\n", $number;
		return;
	    }
	    
	    printf $OUT "dialing %s...\n", $show;
	    my $response = $fritz_service->call(DIAL_ACTION, DIAL_ARG() => $number);
	    check_ok($response);
	},
    },

    hangup => {
	description => 'end a call',
	code => sub {
	    print $OUT "hanging up...\n";
	    my $response = $fritz_service->call(HANGUP_ACTION);
	    check_ok($response);
	},
    },

    shortlist => {
	description => 'list all dial shortcuts',
	code => sub {
	    foreach my $shortcut (sort keys %shortlist) {
		printf $OUT "%-15s  %s\n", $shortcut, $shortlist{$shortcut};
	    }
	},
    },

    quit => {
	description => 'exit fritzdial',
	code => sub {
	    print $OUT "exiting\n";
	    exit;
	},
    },

    help => {
	description => 'show help',
	code => sub {
	    print $OUT "available commands:\n";
	    foreach my $cmd (sort keys %cmd) {
		printf $OUT "  %-10s - %s\n", $cmd, $cmd{$cmd}->{description};
	    }
	}
    },
    );

########################################################
###
### main part

# initialize terminal/readline
my $term = Term::ReadLine->new('fritzdial');
$OUT = $term->OUT || \*STDOUT;

# read configuration
print $OUT "reading configuration file...";
my $rcfile = $ENV{HOME}.'/.fritzdialrc';
open FRITZRC, '<', $rcfile or die "\ncan't open configuration file `$rcfile': $!\n";
while (my $line = <FRITZRC>) {
    chomp $line;
    next if $line =~ /^\s*$/;
    next if $line =~ /^\s*#/;

    if ($line =~ /^(\S+)\s*=\s*(.*?)$/) {
	if ($1 eq 'username') {
	    $user = $2;
	}
	elsif ($1 eq 'password') {
	    $pass = $2
	}
	elsif ($1 eq 'upnp_url') {
	    $url = $2
	}
	else {
	    $shortlist{$1} = $2;
	}
    }
}
close FRITZRC or die $!;
print $OUT "OK\n";

# get Fritz!Box connection
print $OUT "establishing Fritz!Box connection...";
$fritz_service = Fritz::Box->new(
    username => $user,
    password => $pass,
    defined $url ? (upnp_url => $url) : ()
    )
    ->discover->find_service(VOIP_SERVICE);
die unless check_ok($fritz_service);

# main loop
print $OUT "\n";
while ( defined ( my $line = $term->readline('>')) ) {
    chomp $line;
    my ($command, @args) = (grep { length $_ > 0 } split /\s+/, $line);

    if (defined $command) {
	print $OUT "\n";
        my @command = expander($command, keys %cmd);
        if (@command == 1) {
            $cmd{$command[0]}->{code}(@args);
        }
        elsif (@command == 0) {
            printf $OUT "unknown command: %s\n", $command;
        }
	else {
            printf $OUT "ambigious command, possible completions are: %s\n", join(' ', @command);
        }
	print $OUT "\n";
    }
}
