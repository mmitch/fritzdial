#!/usr/bin/perl
my $LICENSE = <<LICENSE;
#
# fritzdial - simple commandline dial help for Fritz!Box
# Copyright (C) 2015 by  Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL v2 or later.
#
LICENSE
    ;
use warnings;
use strict;

use LWP::UserAgent;
use Term::ReadLine;
use XML::Simple;

use Net::Fritz::Box 0.0.9;

########################################################
###
### global variables

my %cmd;
my (%shortlist, %revlist);
my ($user, $pass, $url);
my $fritz;

my $OUT = \*STDOUT;

my $ua = LWP::UserAgent->new();
# disable SSL certificate checks, Fritz!Box has no verifiable SSL certificate
$ua->ssl_opts(verify_hostname => 0 ,SSL_verify_mode => 0x00);

my $xs = XML::Simple->new(ForceArray => 1, KeyAttr => []);

use constant VOIP_SERVICE  => 'X_VoIP:1';
use constant DIAL_ACTION   => 'X_AVM-DE_DialNumber';
use constant DIAL_ARG      => 'NewX_AVM-DE_PhoneNumber';
use constant HANGUP_ACTION => 'X_AVM-DE_DialHangup';

use constant CALL_SERVICE  => 'X_AVM-DE_OnTel:';
use constant LIST_ACTION   => 'GetCallList';
use constant LIST_ARG      => 'NewCallListURL';

use constant CALL_TYPE => {
    1 => 'in',
    2 => 'miss',
    3 => 'out',
    9 => '*IN*',
    10 => 'block',
    11 => '*OUT*',
};

use constant CALLLIST_LINES => 16;

########################################################
###
### subroutines

sub expander($@) {
    my ($value, @valid) = (@_);
    return () unless defined $value;
    return grep { index($_, $value) == 0} @valid;
}

# remove whitespace and common punctuation from phone numbers
# keep # and * for internal calls etc.
sub strip_number($) {
    my $number = shift;
    $number =~ s/\s+//g;
    $number =~ tr,-()[]/+,,d;
    return $number;
}

sub check_ok($) {
    my $check = shift;
    if ($check->error) {
	printf $OUT "ERROR: %s\n", $check->error;
	return 0;
    }
    else {
	print $OUT "OK\n";
	return 1;
    }
}

sub completion_function($$$) {
    my ($text, $line, $start_pos, $end_pos) = @_;
    my $prefix = substr $line, 0, $start_pos;
    my (@words) = (grep { length $_ > 0 } split /\s+/, $prefix);

    if (@words == 0) {
	# first word: expand commands
	return expander($text, sort keys %cmd);
    }
    elsif (@words == 1) {
	# second word: check if command supports expansion
	my $cmd = join('!!', expander($words[0], keys %cmd));
	if (exists $cmd{$cmd}
	    and exists $cmd{$cmd}->{expansion}) {

	    return expander($text, $cmd{$cmd}->{expansion}());
	}
	else {
	    return ();
	}
    }
    else {
	# third word or later: no expansion;
	return ();
    }
}

########################################################
###
### commands

%cmd = (
    dial => {
	description => 'dial a <number> or <shortlist entry>',
	code => sub {
	    my $number = join('', @_);
	    if (length $number == 0) {
		print $OUT "no number given\n";
		return;
	    }

	    my @expand = expander(join(' ', @_), keys %shortlist);
	    if (@expand > 1) {
		printf $OUT "ambigious dial shortcut, possible completions are: %s\n", join(' ', @expand);
		return;
	    }

	    my $show = $number;
	    if (@expand == 1) {
		$number = $shortlist{$expand[0]};
		$show = sprintf '%s [%s]', $expand[0], $number;
	    }

	    $number = strip_number($number);
	    if ($number !~ /^[0-9*#]+$/) {
		printf $OUT "dial error: `%s' does not look like a phone number\n", $number;
		return;
	    }
	    
	    printf $OUT "dialing %s...\n", $show;
	    my $response = $fritz->call(VOIP_SERVICE, DIAL_ACTION, DIAL_ARG() => $number);
	    check_ok($response);
	},
	expansion => sub {
	    return sort keys %shortlist;
	},
    },

    hangup => {
	description => 'end a call',
	code => sub {
	    print $OUT "hanging up...\n";
	    my $response = $fritz->call(VOIP_SERVICE, HANGUP_ACTION);
	    check_ok($response);
	},
    },

    shortlist => {
	description => 'list all dial shortcuts',
	code => sub {
	    foreach my $shortcut (sort keys %shortlist) {
		printf $OUT "%-15s  %s\n", $shortcut, $shortlist{$shortcut};
	    }
	},
    },

    calllist => {
	description => 'list received/outgoing/missed calls (optional: <number of lines>)',
	code => sub {
	    my $max_lines = shift @_ || CALLLIST_LINES;
	    print $OUT "getting call list...\n";
	    my $response = $fritz->call(CALL_SERVICE, LIST_ACTION);
	    if (check_ok($response)) {
		my $xml = $ua->get($response->data->{LIST_ARG()});
		my $xmltree = $xs->parse_string($xml->decoded_content);
		my $line = 1;
		foreach my $call (@{$xmltree->{Call}}) {
		    my $type = $call->{Type}->[0];
		    my $dur  = $call->{Duration}->[0];
		    my $caller = $call->{Caller}->[0];
		    my $called = $call->{Called}->[0];

		    # fix unknown caller
		    if (ref($caller) eq 'HASH') {
			$caller = $call->{Name}->[0];
			if (ref($caller) eq 'HASH' or $caller eq '') {
			    $caller = 'unknown';
			}
		    }

		    # no duration on missed calls:
		    $dur = '' if $type == 2;

		    # expand other arguments
		    $type = CALL_TYPE->{$type} if (exists CALL_TYPE->{$type});
		    $caller = $revlist{strip_number($caller)} if exists $revlist{strip_number($caller)};
		    $called = $revlist{strip_number($called)} if exists $revlist{strip_number($called)};

		    printf $OUT ("  %-14s  %5s  %-20s -> %-20s %7s\n",
				 $call->{Date}->[0],
				 $type,
				 $caller,
				 $called,
				 $dur,
			);

		    $line++;
		    last if $line > $max_lines;
		}
	    }
	},
    },

    quit => {
	description => 'exit fritzdial',
	code => sub {
	    print $OUT "exiting\n";
	    exit;
	},
    },

    help => {
	description => 'show help',
	code => sub {
	    print $OUT "available commands:\n";
	    foreach my $cmd (sort keys %cmd) {
		printf $OUT "  %-10s - %s\n", $cmd, $cmd{$cmd}->{description};
	    }
	}
    },
    );

########################################################
###
### main part

# initialize terminal/readline
my $term = undef;
unless (defined $ARGV[0] and $ARGV[0] eq '-') {
    $term = Term::ReadLine->new('fritzdial');
    $term->Attribs->{'completion_function'} = \&completion_function;
    $OUT = $term->OUT || \*STDOUT;
    print $OUT $LICENSE;
}

# read configuration
print $OUT "reading configuration file...";
my $rcfile = $ENV{HOME}.'/.fritzdialrc';
open FRITZRC, '<', $rcfile or die "\ncan't open configuration file `$rcfile': $!\n";
while (my $line = <FRITZRC>) {
    chomp $line;
    next if $line =~ /^\s*$/;
    next if $line =~ /^\s*#/;

    if ($line =~ /^\s*(.+?)\s*=\s*(.*?)$/) {
	if ($1 eq 'username') {
	    $user = $2;
	}
	elsif ($1 eq 'password') {
	    $pass = $2
	}
	elsif ($1 eq 'upnp_url') {
	    $url = $2
	}
	else {
	    $shortlist{$1} = $2;
	    $revlist{strip_number($2)} = $1;
	}
    }
}
close FRITZRC or die $!;
print $OUT "OK\n";

# get Fritz!Box connection
print $OUT "establishing Fritz!Box connection...";
$fritz = Net::Fritz::Box->new(
    username => $user,
    password => $pass,
    defined $url ? (upnp_url => $url) : ()
    )
    ->discover;
die unless check_ok($fritz);

# main loop
print $OUT "\n";
my $line;
while ( defined $term
	? (defined ( $line = $term->readline('>')))
	: ($line = <>) ) {
    chomp $line;
    my ($command, @args) = (grep { length $_ > 0 } split /\s+/, $line);

    if (defined $command) {
	print $OUT "\n";
        my @command = expander($command, keys %cmd);
        if (@command == 1) {
            $cmd{$command[0]}->{code}(@args);
        }
        elsif (@command == 0) {
            printf $OUT "unknown command: %s\n", $command;
        }
	else {
            printf $OUT "ambigious command, possible completions are: %s\n", join(' ', @command);
        }
	print $OUT "\n";
    }
}
